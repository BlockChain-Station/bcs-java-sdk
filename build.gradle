buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
        jcenter()
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.4'
    id 'com.bmuschko.clover' version '2.1.3'
    id 'net.ltgt.apt' version '0.13'
}

apply from: 'gradle/util.gradle'

subprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'com.bmuschko.clover'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    
	checkstyle {
	    toolVersion "8.4"
	}
	findbugs {
		toolVersion "3.0.1"
	}

    group = 'com.enjin'
    version = '0.0.1-SNAPSHOT'

    idea {
        module {
            scopes.PROVIDED.plus += [configurations.shadow]
        }
    }

    tasks.build.dependsOn(shadowJar)
    artifacts.archives shadowJar

    tasks.withType(AbstractCompile) {
        classpath += configurations.shadow
    }

    ext {
        mockito = '2.9.0'
        junit = '4.12'
        powermock = '1.7.3'
        clover = '4.2.0'
        assertj = '3.8.0'
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        // testCompile dependencies
        testCompile group: 'org.mockito', name: 'mockito-core', version: mockito
        testCompile group: 'junit', name: 'junit', version: junit
        testCompile group: 'org.powermock', name: 'powermock-api-mockito2', version: powermock
        testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: powermock
        testCompile group: 'org.assertj', name: 'assertj-core', version: assertj

        // clover dependencies
        clover group: 'org.openclover', name: 'clover', version: clover
    }

    jar {
        archiveName = "${project.name}-slim.jar"
    }

    shadowJar {
        archiveName = "${project.name}.jar"
    }

    install {
        repositories.mavenInstaller {
            pom.artifactId = "sdk-${project.name}"
        }
    }

    //Documentation https://github.com/bmuschko/gradle-clover-plugin
    clover {
        excludes = ['**/GsonAdapters*.java', '**/Immutable*.java']

        report {
            html = true
            pdf = true
        }
    }
    
    //Documentation - https://docs.gradle.org/current/userguide/checkstyle_plugin.html
    //See http://checkstyle.sourceforge.net/config_sizes.html#LineLength for configuring config/checkstyle/checkstyle.xml
    //Config properties: https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.Checkstyle.html
    tasks.withType(Checkstyle) {
    	exclude '**/Immutable**'
    	exclude '**/GsonAdapters**'
    	
	    reports {
	        xml.enabled true
	        html.enabled true
	        html.stylesheet resources.text.fromFile('../projectConfig/checkstyle/checkstyle-style.xsl')
	    }
	    configFile = rootProject.file('projectConfig/checkstyle/checkstyle.xml')
	}
	
	//Documentation - https://docs.gradle.org/current/userguide/findbugs_plugin.html
	//Config properties: https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.FindBugs.html#org.gradle.api.plugins.quality.FindBugs
	//Filter documentation http://findbugs.sourceforge.net/manual/filter.html 
	def excludePattern1 = '*/Immutable*.java'
	def excludePattern2 = '*/GsonAdapters*.java'
	tasks.withType(FindBugs) {
	    //excludes '**/Immutable**.java'
    	//excludes '**/GsonAdapters**.java'
    	//excludes '**/TypeAdapterfactory.java'
    	excludeFilter = rootProject.file('projectConfig/findbugs/excludeFilter.xml')
    	//classes = classes.filter {
	    //    !it.path.contains(excludePattern1)
	    //    !it.path.contains(excludePattern2)
    	//}
    	    	
	    reports {
	        xml.enabled false
	        html.enabled true
	        html.stylesheet resources.text.fromFile('../projectConfig/findbugs/findbugs-style.xsl')
	    }
	}
	
	
}